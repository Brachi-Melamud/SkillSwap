{"ast":null,"code":"import _asyncToGenerator from \"C:/repo/SkillSwap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass SessionService {\n  submitReview(id, review) {\n    throw new Error('Method not implemented.');\n  }\n  getSession(sessionId) {\n    throw new Error('Method not implemented.');\n  }\n  getUserSessions() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Method not implemented.');\n    })();\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/sessions'; // Replace with the actual API endpoint for sessions\n  }\n\n  scheduleSession(session) {\n    const url = `${this.baseUrl}/schedule`;\n    return this.http.post(url, session);\n  }\n}\nSessionService.ɵfac = function SessionService_Factory(t) {\n  return new (t || SessionService)(i0.ɵɵinject(i1.HttpClient));\n};\nSessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SessionService,\n  factory: SessionService.ɵfac,\n  providedIn: 'root'\n});\nexport { SessionService };","map":{"version":3,"names":["SessionService","submitReview","id","review","Error","getSession","sessionId","getUserSessions","_asyncToGenerator","constructor","http","baseUrl","scheduleSession","session","url","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\repo\\SkillSwap\\src\\app\\session.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n  submitReview(id: any, review: { rating: number | undefined; review: string | undefined; }) {\n    throw new Error('Method not implemented.');\n  }\n  getSession(sessionId: string) {\n    throw new Error('Method not implemented.');\n  }\n  async getUserSessions() {\n    throw new Error('Method not implemented.');\n  }\n  private baseUrl = 'api/sessions'; // Replace with the actual API endpoint for sessions\n\n  constructor(private http: HttpClient) { }\n\n  scheduleSession(session: any): Observable<any> {\n    const url = `${this.baseUrl}/schedule`;\n    return this.http.post(url, session);\n  }\n\n  // Implement additional methods for session-related operations:\n  // - getSession(sessionId): Observable<any>\n  // - updateSession(sessionId, sessionData): Observable<any>\n  // - cancelSession(sessionId): Observable<any>\n  // ...\n\n}\n"],"mappings":";;;AAIA,MAGaA,cAAc;EACzBC,YAAYA,CAACC,EAAO,EAAEC,MAAmE;IACvF,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAC,UAAUA,CAACC,SAAiB;IAC1B,MAAM,IAAIF,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACMG,eAAeA,CAAA;IAAA,OAAAC,iBAAA;MACnB,MAAM,IAAIJ,KAAK,CAAC,yBAAyB,CAAC;IAAC;EAC7C;EAGAK,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,cAAc,CAAC,CAAC;EAEM;;EAExCC,eAAeA,CAACC,OAAY;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,WAAW;IACtC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAACD,GAAG,EAAED,OAAO,CAAC;EACrC;;AAjBWb,cAAc,C;mBAAdA,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdnB,cAAc,C;SAAdA,cAAc;EAAAoB,OAAA,EAAdpB,cAAc,CAAAqB,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEPtB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}